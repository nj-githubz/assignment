apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    name: flask
  name: flask
spec:
  replicas: 3
  strategy:
    rollingUpdate:
        maxSurge: 50%
        maxUnavailable: 50%
    type: RollingUpdate
  selector:
    matchLabels:
      app: flask
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: flask
    spec:
      containers:
      - env:
        - name: POSTGRES_DB
          value: users
        - name: HOST
          value: postgresql-postgresql.default.svc.cluster.local
        - name: POSTGRES_USER
          value: postgres
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              key: postgresql-password
              name: postgresql-password
        image: "{{ .Values.image.repository }}:{{ .Chart.AppVersion }}"
        imagePullPolicy: Always
        name: flask
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /hello/healthCheck
            port: 5000
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 20
          successThreshold: 1
          timeoutSeconds: 10
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /hello/healthCheck
            port: 5000
            scheme: HTTP
          periodSeconds: 20
          successThreshold: 1
          timeoutSeconds: 10
        resources: 
          requests:
            memory: 530Mi
            cpu: 100m
          limits:
            memory: 800Mi
            cpu: 400m
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
